 You are a judge evaluating a file content against predefined checkpoints.  
        Each checkpoint has an assigned score.

        Task:  
        1. Analyze the file based on the given checkpoints.  
        2. If a checkpoint is met, assign the corresponding score else assign zero. 
        3. Generate a detailed report with the following format:  
            - Clearly list each checkpoint and the corresponding score assigned.  
            - Conclude the report with the final score in the format:  
                **Final Score: <score>/<total>**
        Don't make introduction or conclusion just respond directly with the report in the format specified above.

    

        # Checkpoints

    ## Main Module Checkpoints - Total 12 pts (grade_checkpoint2)

### 1. Interface (1 pts)
   - The code implements the following interface:
   ```psuedo-verilog
   module fpu(
      clk,                  // Clock signal for pipelining
      [1:0] rounding_mode,  // Selects the rounding mode
      [2:0] operation,      // Selects the FPU operation
      [31:0] operand_A,     // First operand (single-precision)
      [31:0] operand_B,     // Second operand (single-precision)
      [31:0] out,          // Result of the operation
      overflow,            // Overflow exception
      underflow,           // Underflow exception
      div_by_zero,         // Division by zero exception
      inexact,             // Inexact result exception
      invalid_operation    // Invalid operation exception
   );
   ```

### 2. Operations Support (5 pts)
   - The code implements IEEE-754 operations:
     - The code implements addition/subtraction (1 pts)
     - The code implements multiplication (1 pts)
     - The code implements division (1 pts)
     - The code implements int-to-float conversion (1 pts)
     - The code implements float-to-int conversion (1 pts)

### 3. IEEE 754 Compliance (5 pts)
   - The code implements standard features:
     - The code handles special values (NaN, Infinity, Zero) (1 pts)
     - The code implements all four rounding modes (1 pts)
     - The code detects overflow and underflow (1 pts)
     - The code handles division by zero (1 pts)
     - The code detects invalid operations (1 pts)

### 4. Pipeline Implementation (1 pt)
   - The code implements pipelining. ( 1pt)

        Listed below are the contents for all files in the workspace. You are required to evaluate only the file that is
        relevant to the defined checkpoints.

    
# /workspace/fpu.v
```verilog
module fpu (
    input wire clk,
    input wire [1:0] rounding_mode,
    input wire [2:0] operation,
    input wire [31:0] operand_A,
    input wire [31:0] operand_B,
    output reg [31:0] out,
    output reg overflow,
    output reg underflow,
    output reg div_by_zero,
    output reg inexact,
    output reg invalid_operation
);

    // IEEE 754 single precision fields
    wire sign_A = operand_A[31];
    wire sign_B = operand_B[31];
    wire [7:0] exp_A = operand_A[30:23];
    wire [7:0] exp_B = operand_B[30:23];
    wire [22:0] frac_A = operand_A[22:0];
    wire [22:0] frac_B = operand_B[22:0];

    // Pipeline registers
    reg [31:0] op_A_r, op_B_r;
    reg [2:0] op_r;
    reg [1:0] round_r;
    
    // Internal signals for pipeline stages
    reg [24:0] mantissa_A, mantissa_B; // 1 hidden bit + 23 fraction bits + 1 guard bit
    reg [8:0] exponent_A, exponent_B;  // 1 extra bit for overflow
    reg sign_result;
    reg [47:0] product;  // For multiplication
    reg [24:0] sum;  
```
